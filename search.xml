<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>冒泡排序、插入排序、快速排序</title>
    <url>/2020/02/25/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E3%80%81%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E3%80%81%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>​    让数组中的当前项和后一项进行比较，如果当前项比后一项大，则两项交换位置</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">8</span>,<span class="number">24</span>,<span class="number">16</span>,<span class="number">1</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 外层循环 i 控制比较的轮数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;arr.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="comment">// 里层循环 j 控制每一轮比较的轮数 因为不用跟自己比 所以-1 </span></span><br><span class="line">        <span class="comment">// i=0时 冒出一个最大值 i=1时 冒出两个最大值 。。。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;arr.length<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                [arr[j],arr[j+<span class="number">1</span>]] = [arr[j+<span class="number">1</span>],arr[j]]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>​    类似打牌，每次从别人手里抽取一张牌，然后放到自己手里，再从后往前排（也可以从前往后），找到位置最后插进去</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">8</span>,<span class="number">24</span>,<span class="number">16</span>,<span class="number">1</span>]</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">       <span class="comment">//1.准备一个新数组，用来存储抓到手里的牌，开始先抓一张牌进来</span></span><br><span class="line">       <span class="keyword">let</span> result = []</span><br><span class="line">       result.push(arr[<span class="number">0</span>])</span><br><span class="line">       <span class="comment">//2.从第二项开始一次抓牌，一直到把别人手里的牌抓光</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">           <span class="comment">//A 是新抓的牌</span></span><br><span class="line">           <span class="keyword">let</span> A = arr[i]</span><br><span class="line">           <span class="comment">// 和result手里的牌依次比较（从后向前比）</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">let</span> j = result.length<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">               <span class="comment">// 每次要比较的手里牌</span></span><br><span class="line">               <span class="keyword">let</span> B = result[j]</span><br><span class="line">               <span class="comment">//如果当前新牌A比要比较的牌B大了，把A放到B的后面</span></span><br><span class="line">               <span class="keyword">if</span>(A&gt;B)&#123;</span><br><span class="line">                   result.splice(j+<span class="number">1</span>,<span class="number">0</span>,A)</span><br><span class="line">                   <span class="keyword">break</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//已经比到第一项了,把新牌放到手中最前面</span></span><br><span class="line">               <span class="keyword">if</span>(j===<span class="number">0</span>)&#123;</span><br><span class="line">                   result.unshift(A)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> result</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>先把中间项拿出来，让拿出来的每一项和中间项比较，比中间相小的放到左边  比他大的放到右边 然后递归</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">8</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">1</span>,<span class="number">24</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//4.结束递归 当arr中小于等于1项，则不用管</span></span><br><span class="line">    <span class="keyword">if</span>(arr.length&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.找到数组的中间项，在原有的数组中把它移除</span></span><br><span class="line">    <span class="keyword">let</span> middle = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">let</span> middleValue = arr.splice(middle,<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">//2.准备左右两个数组，循环盛夏数组的每一项，比当前项小的放到左边，打的放到右边</span></span><br><span class="line">    <span class="keyword">let</span> arrLeft=[],arrRight=[]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> item = arr[i]</span><br><span class="line">        item&lt;middleValue ? arrLeft.push(item) : arrRight.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.递归方式让左右两边的数组持续这样处理，一直到左右两边都排好序（最后让左边+中间+后边）</span></span><br><span class="line">    <span class="keyword">return</span> quick(arrLeft).concat(middleValue,quick(arrRight))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>关于数组扁平化处理</title>
    <url>/2020/02/25/%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h2 id="数组扁平化，去除其中重复部分的数据，得到一个升序且不重复的数组"><a href="#数组扁平化，去除其中重复部分的数据，得到一个升序且不重复的数组" class="headerlink" title="数组扁平化，去除其中重复部分的数据，得到一个升序且不重复的数组"></a>数组扁平化，去除其中重复部分的数据，得到一个升序且不重复的数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,[<span class="number">11</span>,<span class="number">12</span>,[<span class="number">12</span>,<span class="number">13</span>,[<span class="number">14</span>]]]],<span class="number">10</span>]</span><br><span class="line"><span class="comment">//PS: 如果数组里包含json，那么第二种方法会失效，因为对象.tostring() =&gt; [object,Object]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法一 使用ES6中提供的Array.prototype.flat 处理</span></span><br><span class="line">arr = [...new <span class="built_in">Set</span>(arr.flat(<span class="number">4</span>))].sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> a-b)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法二 把数组直接变为字符串即可</span></span><br><span class="line">   arr = arr.toString().split(<span class="string">','</span>).map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> item = <span class="built_in">Number</span>(item)</span><br><span class="line">   &#125;).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span> a - b)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//方法三 用JSON.stringify() 然后去除 []</span></span><br><span class="line">   arr = <span class="built_in">JSON</span>.stringify(arr).replace(<span class="regexp">/(\[|\])/g</span>,<span class="string">''</span>).split(<span class="string">','</span>).map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> item = <span class="built_in">Number</span>(item)</span><br><span class="line">   &#125;).sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span> a - b)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法四 基于数组的some方法进行判断检测</span></span><br><span class="line">   <span class="keyword">while</span>(arr.some(<span class="function"><span class="params">item</span>=&gt;</span><span class="built_in">Array</span>.isArray(item)))&#123;</span><br><span class="line">       arr = [].concat(...arr)</span><br><span class="line">   &#125;</span><br><span class="line">   arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>a - b)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 方法五 自己写递归</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">let</span> result = [],_this = <span class="keyword">this</span></span><br><span class="line">       <span class="keyword">let</span> fn = <span class="function">(<span class="params">arr</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">               <span class="keyword">let</span> item = arr[i]</span><br><span class="line">               <span class="keyword">if</span>(<span class="built_in">Array</span>.isArray(item))&#123;</span><br><span class="line">                   fn(item)</span><br><span class="line">                   <span class="keyword">continue</span></span><br><span class="line">               &#125;</span><br><span class="line">               result.push(item)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       fn(_this)</span><br><span class="line">       <span class="keyword">return</span> result</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">Array</span>.prototype.a = a</span><br><span class="line">   arr = arr.a().sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript面试题(2)</title>
    <url>/2020/02/24/JavaScript%E9%9D%A2%E8%AF%95%E9%A2%98(2)/</url>
    <content><![CDATA[<h2 id="输出下面代码运行结果"><a href="#输出下面代码运行结果" class="headerlink" title="输出下面代码运行结果"></a>输出下面代码运行结果</h2><h3 id="example-1"><a href="#example-1" class="headerlink" title="example   1"></a>example   1</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;&#125;,b=<span class="string">'123'</span>,c=<span class="number">123</span></span><br><span class="line">a[b]=<span class="string">'b'</span> a[c]=<span class="string">'c'</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b]) <span class="comment">// c   a['123'] 跟 a[123] 一个样</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="example-2"><a href="#example-2" class="headerlink" title="example   2"></a>example   2</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;&#125;,b=<span class="built_in">Symbol</span>(<span class="string">'123'</span>),c=<span class="built_in">Symbol</span>(<span class="string">'123'</span>)</span><br><span class="line">a[b]=<span class="string">'b'</span> a[c]=<span class="string">'c'</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b]) <span class="comment">// b   Symbol创建的值是唯一的 b != c</span></span><br></pre></td></tr></table></figure>

<h3 id="example-3"><a href="#example-3" class="headerlink" title="example   3"></a>example   3</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;&#125;,b=&#123;<span class="attr">key</span>:<span class="string">'123'</span>&#125;,c=&#123;<span class="attr">key</span>:<span class="string">'456'</span>&#125;</span><br><span class="line">a[b]=<span class="string">'b'</span> a[c]=<span class="string">'c'</span></span><br><span class="line"><span class="built_in">console</span>.log(a[b]) <span class="comment">// c  对象的属性名不能是对象(会默认转换为字符串)[10,20]=&gt;"10,20"</span></span><br><span class="line">				<span class="comment">// 最后 a=&#123;"[object Object]" : "c"&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="example-4"><a href="#example-4" class="headerlink" title="example   4"></a>example   4</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Foo.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//把Foo当做类，在原型上设置实例私有的属性方法 =&gt; 实例.a()</span></span><br><span class="line">    <span class="keyword">this</span>.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把Foo当做普通对象设置公有的属性方法  =&gt; Foo.a()</span></span><br><span class="line">Foo.prototype.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">Foo.a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line">Foo.a() <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> Foo() <span class="comment">//obj可以调取原型上的方法 当这个实例创建时console.log(4) 被console.log(1)代替了</span></span><br><span class="line">obj.a() <span class="comment">// 2  优先调取私有属性</span></span><br><span class="line">Foo.a() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="编写一条正则，来验证此规则：一个6-16位的字符串，必须同时包含有大小写字母和数字"><a href="#编写一条正则，来验证此规则：一个6-16位的字符串，必须同时包含有大小写字母和数字" class="headerlink" title="编写一条正则，来验证此规则：一个6~16位的字符串，必须同时包含有大小写字母和数字"></a>编写一条正则，来验证此规则：一个6~16位的字符串，必须同时包含有大小写字母和数字</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ?!负向预查  ?=正向预查</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(?!^[a-zA-Z]+$)(?!^[A-Z0-9]+$)(?!^[a-z0-9]+$)(?!^[0-9]+$)^[a-zA-Z0-9]&#123;6,16&#125;$/</span></span><br><span class="line"><span class="comment">//不能全是小写 全是大写 全是数字 全是小写和大写。。。</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="英文字母汉字组成的字符串，用正则给英文单词前后加空格"><a href="#英文字母汉字组成的字符串，用正则给英文单词前后加空格" class="headerlink" title="英文字母汉字组成的字符串，用正则给英文单词前后加空格"></a>英文字母汉字组成的字符串，用正则给英文单词前后加空格</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"ya索rui雯,开da！"</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/\b[a-z]+\b/ig</span> <span class="comment">//  \b 匹配必须出现在 \w 和 \W 字符之间的边界上</span></span><br><span class="line">str = str.replace(reg,(value)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">" "</span>+value+<span class="string">" "</span></span><br><span class="line">&#125;).trim() <span class="comment">//去除前后空格</span></span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">//"ya 索 rui 雯,开 da ！"</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="给定两个数组，写一个方法来计算它们的交集"><a href="#给定两个数组，写一个方法来计算它们的交集" class="headerlink" title="给定两个数组，写一个方法来计算它们的交集"></a>给定两个数组，写一个方法来计算它们的交集</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">nums1.forEach(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> n = nums2.indexOf(item)</span><br><span class="line">    <span class="keyword">if</span>(n &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        arr.push(item)</span><br><span class="line">        nums2.splice(n,<span class="number">1</span>)</span><br><span class="line">        nums1.splice(index,<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript面试题(1)</title>
    <url>/2020/02/24/JavaScript%E9%9D%A2%E8%AF%95%E9%A2%98(1)/</url>
    <content><![CDATA[<h2 id="call-和-apply的区别是什么，哪个性能更好一些"><a href="#call-和-apply的区别是什么，哪个性能更好一些" class="headerlink" title="call 和 apply的区别是什么，哪个性能更好一些"></a>call 和 apply的区别是什么，哪个性能更好一些</h2><h3 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h3><ol>
<li><p>都是Function原型上的方法，每个函数作为Function类的实例都能调用这方法</p>
<a id="more"></a>
</li>
<li><p>都是改变函数this的指向</p>
</li>
</ol>
<h3 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h3><ol>
<li>传参不一样，<strong>call</strong>是一个个传，<strong>apply</strong>用数组传</li>
<li>当参数大于<strong>3</strong>个时，<strong>call</strong>性能更好一些</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fn.call(obj,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>) </span><br><span class="line">fn.apply(obj,[<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>])</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name:<span class="string">'亚索'</span>,</span><br><span class="line">    myFun:<span class="function"><span class="keyword">function</span>(<span class="params">X</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + X)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> db = &#123;</span><br><span class="line">    name:<span class="string">'锐雯'</span></span><br><span class="line">&#125;</span><br><span class="line">obj.myFun.call(db,<span class="string">'开大'</span>) <span class="comment">//锐雯开大</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="实现（5）-add（3）-minus（2），使其输出结果为：6"><a href="#实现（5）-add（3）-minus（2），使其输出结果为：6" class="headerlink" title="实现（5）.add（3）.minus（2），使其输出结果为：6"></a>实现（5）.add（3）.minus（2），使其输出结果为：6</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 每一个方法执行完，都要返回number这个类的实例，这样才可以继续调用number类中的方法(链式写法)</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span> + n</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">minus</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span> - n</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">Number</span>.prototype.add = add</span><br><span class="line">     <span class="built_in">Number</span>.prototype.minus = minus</span><br><span class="line"> &#125;)();</span><br><span class="line"> <span class="comment">//在JS中不可能存在变量或者其他单纯只有数字，所以要加()</span></span><br><span class="line"> <span class="built_in">console</span>.log((<span class="number">5</span>).add(<span class="number">3</span>).minus(<span class="number">2</span>)) <span class="comment">//6</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="箭头函数与普通函数（function）的区别是什么？构造函数（function）可以使用new生成实例，那么箭头函数可以吗？为什么？"><a href="#箭头函数与普通函数（function）的区别是什么？构造函数（function）可以使用new生成实例，那么箭头函数可以吗？为什么？" class="headerlink" title="箭头函数与普通函数（function）的区别是什么？构造函数（function）可以使用new生成实例，那么箭头函数可以吗？为什么？"></a>箭头函数与普通函数（function）的区别是什么？构造函数（function）可以使用new生成实例，那么箭头函数可以吗？为什么？</h2><h3 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h3><ol>
<li>箭头函数语法上比普通函数更加简洁</li>
<li>箭头函数没有自己的<strong>this</strong>，它里面出现的<strong>this</strong>从继承函数所处上下文的<strong>this</strong></li>
<li>箭头函数没有<strong>arguments</strong>（类数组），只能基于<strong>…args</strong>获取参数集合（数组）</li>
<li>箭头函数不能new执行（因为：箭头函数没有this也没有<strong>prototype</strong>）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        name:<span class="string">'obj'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fn1.call(obj) <span class="comment">//obj</span></span><br><span class="line">    <span class="keyword">let</span> fn2 = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//this指向所属上下文</span></span><br><span class="line">    &#125;</span><br><span class="line">    fn2.call(obj)<span class="comment">//window call方法无效</span></span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">    <span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//this =&gt; body</span></span><br><span class="line">        arr.srot(<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//this =&gt; window  只是把这个方法传给sort 回调函数的this一般都是window</span></span><br><span class="line">        &#125;)</span><br><span class="line">        arr.srot(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//this =&gt;body</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//手写forEach</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">arr,callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            callback.call(arr,[arr[i],i]) </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    each([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>],<span class="function"><span class="keyword">function</span> (<span class="params">item,index</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//如果callback没有call 那么this还是会指向window</span></span><br><span class="line">            <span class="comment">//this =&gt; 当前数组</span></span><br><span class="line">    &#125;)</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">...arg</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//console.log(arguments) //Uncaught ReferenceError: arguments is not defined</span></span><br><span class="line">    <span class="built_in">console</span>.log(arg) <span class="comment">//[10,20,30]</span></span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="如何把一个字符串的大小写取反，例如’AbC’-变成-‘aBc’"><a href="#如何把一个字符串的大小写取反，例如’AbC’-变成-‘aBc’" class="headerlink" title="如何把一个字符串的大小写取反，例如’AbC’ 变成 ‘aBc’"></a>如何把一个字符串的大小写取反，例如’AbC’ 变成 ‘aBc’</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">"亚索锐雯yasuoRUIWEN!*10~haHa"</span></span><br><span class="line">str = str.replace(<span class="regexp">/[a-zA-Z]/g</span>,(content)=&gt;&#123;</span><br><span class="line">    <span class="comment">//content:每一次正则匹配的结果 y,a,s,u,o,R,U,I,W,E,N,h,a,H,a</span></span><br><span class="line">    <span class="comment">//如果转换成大写还是跟自己相同，那本来就是大写，否则就是小写</span></span><br><span class="line">    <span class="keyword">return</span> content.toUpperCase === content ? content.toLowerCase : content.toUpperCase()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="实现一个字符串匹配方法，从字符串-S-中，查找是否存在字符串T，若存在返回所在位置，不存在返回-1！（手写）"><a href="#实现一个字符串匹配方法，从字符串-S-中，查找是否存在字符串T，若存在返回所在位置，不存在返回-1！（手写）" class="headerlink" title="实现一个字符串匹配方法，从字符串 S 中，查找是否存在字符串T，若存在返回所在位置，不存在返回-1！（手写）"></a>实现一个字符串匹配方法，从字符串 S 中，查找是否存在字符串T，若存在返回所在位置，不存在返回-1！（手写）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.循环原始字符串中的每一项，让每一下从当前位置向后截取(substr)T.length个字符，然后和T进行比较</span></span><br><span class="line"><span class="comment">//2.正则</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myIndexOf</span>(<span class="params">T</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//this =&gt; S</span></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(T)</span><br><span class="line">    res = reg.exec(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">return</span> res === <span class="literal">null</span> ? <span class="number">-1</span> : res.index</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">String</span>.prototype.myIndexOf = myIndexOf</span><br><span class="line"><span class="keyword">let</span> S = <span class="string">"yasuoruiwenwuzhanpeng"</span>,</span><br><span class="line">    T = <span class="string">"wu"</span></span><br><span class="line"><span class="built_in">console</span>.log(S.myIndexOf(T)); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//把 var 改成 let let存在块级作用域，每一次循环都会在当前块级作用域中形成一个私有变量i，存储0~9</span></span><br><span class="line"><span class="comment">//当定时器执行的时候，所使用的i就是块级作用域中的i</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//闭包写法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其实就是让 i 变成私有化</span></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//本该匿名的函数 如果设置了函数名，在外面无法调用，但是在函数里面是可以使用的</span></span><br><span class="line"><span class="comment">//比如let fn = function a()&#123;&#125;    a() =&gt; a is not defined</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    b=<span class="number">20</span></span><br><span class="line">    <span class="built_in">console</span>.log(b)  <span class="comment">// b()&#123;&#125;  如果要输出b为20 要 var b = 20</span></span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">//所以在外面没有调用到b()</span></span><br><span class="line"><span class="built_in">console</span>.log(b);  <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.&#123;&#125; == &#123;&#125; 两个对象的比较，比较的是堆内存的地址</span></span><br><span class="line"><span class="comment">//2.null == undefined 相等的 / null === undefined 不相等</span></span><br><span class="line"><span class="comment">//3.NaN == NaN 不相等 NaN和谁都不相等</span></span><br><span class="line"><span class="comment">//4.[12] == "12" 对象和字符串比较，是把对象toString()转换为字符串后再进行比较的</span></span><br><span class="line"><span class="comment">//5.剩余所有情况在进行的比较的时候，都是转换为数字(前提数据类型不一样)</span></span><br><span class="line"><span class="comment">// 对象转数字：先转换为字符串(toString())，然后再转换为数字</span></span><br><span class="line"><span class="comment">// 字符串转数字：只要出现一个非数字字符，结果就是NaN</span></span><br><span class="line"><span class="comment">// 布尔转数字: true-&gt;1 false-&gt;0</span></span><br><span class="line"><span class="comment">// null 转数字0</span></span><br><span class="line"><span class="comment">// undefined 转数字NaN</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    n:<span class="number">0</span>,</span><br><span class="line">    <span class="comment">//设成私有方法</span></span><br><span class="line">    toString:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="keyword">this</span>.n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a == 1 a 会调用a.toString() </span></span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a ==<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种:</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">0</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">window</span>,<span class="string">'a'</span>,&#123; <span class="comment">//一调用window.a  就会调用get</span></span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> ++n</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>面试题</tag>
      </tags>
  </entry>
</search>
